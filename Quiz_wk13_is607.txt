{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf210
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww17400\viewh13020\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\fs24 \cf0 ---\
title: "QuizWk13"\
author: "Prashant B. Bhuyan"\
date: "November 30, 2014"\
output: word_document\
---\
\
Problem 1.\
\
library(rbenchmark)\
library(plyr)\
\
\
checkprime <- function(n) \{\
	if (n == 2) \{\
			TRUE\
	\} \
	else if (any(n %% 2:(n-1) == 0)) \{\
			FALSE\
  	\} \
	else \{ \
     			TRUE\
  	 \}\
 \}\
\
check that function works\
# sapply(0:1000,checkprime)\
\
# benchmark(f(1),f(10),f(20))[,1:4]\
\
# Output: \
> checkprime(7919)\
[1] TRUE    \
\
This above function works, now check the Rcpp function below.\
\
\
#include <Rcpp.h>\
using namespace Rcpp;\
\
// [[Rcpp::export]]\
\
int checkprimeRcpp(int x)\{\
  int i = 2;\
  while( i <= x-1)\
  \{\
    if(x%i== 0)\
    \{\
      return FALSE;\
  \
    \}\
    i++;\
  \}\
  if(i==x)\
  \{\
    return TRUE;\
  \}\
  else\
  \{\
    return FALSE;\
  \}\
\}\
\
\
\
Output: \
> checkprimeRcpp(7919)\
[1] 1\
\
The Rcpp checkprime function works as well.  Now let\'92s move to benchmarking. . . \
\
Benchmarking checkprime() in R to checkprimeRcpp() in Rcpp for the prime number 7919.\
\
benchmark(checkprime(7919), checkprimeRcpp(7919))[,1:4]\
\
\
# Output:\
                  test                 replications    elapsed   relative\
1     checkprime(7919)          100            0.032      10.667\
2  checkprimeRcpp(7919)     100            0.003      1.000\
\
\

\b \ul Clearly checkprime in R is much much slower than checkprimeRcpp in testing a relatively small prime number.
\b0 \ulnone \
\
Problem 2.\
\
# Create a database \
\
-- Database: "lostandfoundDB"\
\
-- DROP DATABASE "lostandfoundDB";\
\
CREATE DATABASE "lostandfoundDB"\
  WITH OWNER = postgres\
       ENCODING = 'UTF8'\
       TABLESPACE = pg_default\
       LC_COLLATE = 'C'\
       LC_CTYPE = 'C'\
       CONNECTION LIMIT = -1;\
\
# Create a table with a boolean column variable\
\
-- Table: missing\
\
-- DROP TABLE missing;\
\
CREATE TABLE missing\
(\
  missed boolean\
)\
WITH (\
  OIDS=FALSE\
);\
ALTER TABLE missing\
  OWNER TO postgres;\
\
# define a procedure (returns void) to update missing boolean values with found boolean values.\
\
-- Function: find()\
\
-- DROP FUNCTION find();\
\
CREATE OR REPLACE FUNCTION find()\
  RETURNS void AS\
$BODY$BEGIN\
\
	IF EXISTS (SELECT 1 FROM missing WHERE missed = TRUE ) THEN\
		UPDATE missing SET missed = FALSE;\
	ELSE\
		INSERT INTO missing VALUES(missed);\
	END IF;\
\
END;$BODY$\
  LANGUAGE plpgsql VOLATILE\
  COST 100;\
ALTER FUNCTION find()\
  OWNER TO postgres;\
\
# Insert Values into the \'91missing\'92 table. \
\
INSERT INTO missing VALUES(TRUE);\
\
# Check that the values have been inserted.\
\
SELECT * FROM missing\
\
# output\
t\
t\
t\
t\
t\
\
# Run procedure find()\
\
SELECT find()\
\
# Check that the values have been updated.\
\
SELECT * FROM missing;\
\
# Output\
\
f\
f\
f\
f\
f\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
\
}